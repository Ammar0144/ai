// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "https://github.com/Ammar0144/ai",
        "contact": {
            "name": "API Support",
            "url": "https://github.com/Ammar0144/ai/issues",
            "email": "support@example.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/ai/chat/completions": {
            "post": {
                "description": "Generate a chat completion based on conversation history. Rate limited to 30 requests per minute per IP address.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AI Processing"
                ],
                "summary": "Chat completion",
                "parameters": [
                    {
                        "description": "Chat completion request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ChatCompletionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful chat completion",
                        "schema": {
                            "$ref": "#/definitions/models.ChatCompletionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "429": {
                        "description": "Rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/ai/complete": {
            "post": {
                "description": "Complete text based on a given prompt. Rate limited to 30 requests per minute per IP address.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AI Processing"
                ],
                "summary": "Text completion",
                "parameters": [
                    {
                        "description": "Complete request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CompleteRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful text completion",
                        "schema": {
                            "$ref": "#/definitions/models.CompleteResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "429": {
                        "description": "Rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/ai/generate": {
            "post": {
                "description": "Generate text based on a given prompt. Rate limited to 30 requests per minute per IP address.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AI Processing"
                ],
                "summary": "Text generation",
                "parameters": [
                    {
                        "description": "Generate request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.GenerateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful text generation",
                        "schema": {
                            "$ref": "#/definitions/models.GenerateResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "429": {
                        "description": "Rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/ai/model-info": {
            "get": {
                "description": "Get detailed information about the current AI model being used. Rate limited to 100 requests per minute per IP address.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Get model information",
                "responses": {
                    "200": {
                        "description": "Model information",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "429": {
                        "description": "Rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Check the health status of the AI service. Rate limited to 200 requests per minute per IP address.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Health check",
                "responses": {
                    "200": {
                        "description": "Service is healthy",
                        "schema": {
                            "$ref": "#/definitions/models.HealthResponse"
                        }
                    },
                    "429": {
                        "description": "Rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.ChatCompletionRequest": {
            "type": "object",
            "properties": {
                "max_tokens": {
                    "type": "integer"
                },
                "messages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ChatMessage"
                    }
                },
                "temperature": {
                    "type": "number"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.ChatCompletionResponse": {
            "type": "object",
            "properties": {
                "model": {
                    "type": "string"
                },
                "response": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.ChatMessage": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "models.CompleteRequest": {
            "type": "object",
            "properties": {
                "max_tokens": {
                    "type": "integer"
                },
                "prompt": {
                    "type": "string"
                },
                "temperature": {
                    "type": "number"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.CompleteResponse": {
            "type": "object",
            "properties": {
                "model": {
                    "type": "string"
                },
                "response": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.GenerateRequest": {
            "type": "object",
            "properties": {
                "max_tokens": {
                    "type": "integer"
                },
                "prompt": {
                    "type": "string"
                },
                "temperature": {
                    "type": "number"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.GenerateResponse": {
            "type": "object",
            "properties": {
                "model": {
                    "type": "string"
                },
                "response": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.HealthResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0.0",
	Host:             "localhost:8081",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "AI Service API",
	Description:      "A comprehensive Go-based AI service providing various artificial intelligence capabilities with advanced rate limiting, CORS support, and robust error handling.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
